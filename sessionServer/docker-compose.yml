
services:
  web:
    build:
      context: .
      dockerfile: ./docker/django/Dockerfile
    env_file: .env 
    environment:
      REQUIRE_HTTPS: ${REQUIRE_HTTPS:-true}
      RUN_TEST_SETUP: ${RUN_TEST_SETUP:-false}
    image: my_apache:latest
    container_name: my_apache
    working_dir: /sessionServer
    depends_on:
      - postgres
      - redis
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py update_allowed_users &&
        if [ \"${RUN_TEST_SETUP}\" = \"true\" ]; then
          python manage.py create_test_data;
        fi &&
        apache2ctl -D FOREGROUND
      "
    ports:
      - "8080:443"
      - "8000:80"
    volumes:
      - .:/sessionServer 
      - ./apache2/logs:/var/log/apache2
      - ./logs:/sessionServer/logs
    extra_hosts:
      - "SessionID:127.0.0.1"
    restart: on-failure

  postgres:
    image: postgres:latest
    container_name: session_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mydb}
      POSTGRES_USER: ${POSTGRES_USER:-myuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mypassword}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/wal:/loki/wal
      - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml
    command: -config.file=/etc/loki/loki-config.yaml -config.expand-env=true

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./promtail-config.yaml:/etc/promtail/promtail-config.yaml
      - ./apache2/logs:/var/log/apache2
      - ./logs:/sessionServer/logs
      - /var/log:/var/log
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/promtail-config.yaml

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis.conf:/etc/redis/redis.conf  
      - redis_data:/data                              
    command: ["redis-server", "/etc/redis/redis.conf"]

  celeryworker: &celery
    build:
      context: .
      dockerfile: ./docker/celery/Dockerfile
    env_file: ./config/.env
    environment:
      REQUIRE_HTTPS: ${REQUIRE_HTTPS:-true}
      RUN_TEST_SETUP: ${RUN_TEST_SETUP:-false}
    image: session_celeryworker:latest
    container_name: session_celeryworker
    working_dir: /sessionServer
    depends_on:
      - web
      - redis
    command: /start-celeryworker
    volumes:
      - ./logs:/sessionServer/logs
    restart: on-failure


  celerybeat:
    <<: *celery
    image: session_celerybeat:latest
    container_name: session_celerybeat
    command: /start-celerybeat

  flower:
    <<: *celery
    image: session_flower:latest
    container_name: session_flower
    ports:
      - "5555:5555"
    command: /start-flower

volumes:
  grafana-storage:
  postgres-data:
  redis_data: