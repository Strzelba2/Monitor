# Generated by Django 5.1.2 on 2025-01-15 12:40

import datetime
import django.core.validators
import django.db.models.deletion
import session.models
import session.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('session', '0005_alter_session_expires'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='blockedip',
            options={'ordering': ['-ip_address'], 'verbose_name': 'Blocked IP Address', 'verbose_name_plural': 'Blocked IP Address'},
        ),
        migrations.AlterModelOptions(
            name='requestlog',
            options={'ordering': ['-ip_address'], 'verbose_name': 'Requests logs', 'verbose_name_plural': 'Requests logs'},
        ),
        migrations.AlterModelOptions(
            name='server',
            options={'ordering': ['-name'], 'verbose_name': 'Server', 'verbose_name_plural': 'Server'},
        ),
        migrations.AlterModelOptions(
            name='session',
            options={'ordering': ['-created'], 'verbose_name': 'Session', 'verbose_name_plural': 'Session'},
        ),
        migrations.AlterField(
            model_name='blockedip',
            name='blocked_until',
            field=models.DateTimeField(default=session.models.get_default_blocked_until, help_text='The time until which the IP address will remain blocked.', validators=[session.validators.validate_blocked_until], verbose_name='Block Until'),
        ),
        migrations.AlterField(
            model_name='blockedip',
            name='ip_address',
            field=models.CharField(help_text='The IP address that is being blocked.', max_length=255, unique=True, validators=[session.validators.validate_ip_address_with_port], verbose_name='IP Adress'),
        ),
        migrations.AlterField(
            model_name='blockedip',
            name='path',
            field=models.CharField(default='/default', help_text='The path associated with the blocked IP address (optional).', max_length=255, verbose_name='Path'),
        ),
        migrations.AlterField(
            model_name='blockedip',
            name='user_agent',
            field=models.CharField(blank=True, default='', help_text='The user agent string associated with the blocked IP address (optional).', max_length=255, null=True, verbose_name='User Agent'),
        ),
        migrations.AlterField(
            model_name='requestlog',
            name='ip_address',
            field=models.CharField(blank=True, help_text='The IP address of the client making the request.', max_length=45, null=True, verbose_name='IP Adress'),
        ),
        migrations.AlterField(
            model_name='requestlog',
            name='method',
            field=models.CharField(blank=True, help_text='The HTTP method used for the request (e.g., GET, POST, PUT).', max_length=10, null=True, verbose_name='Method'),
        ),
        migrations.AlterField(
            model_name='requestlog',
            name='path',
            field=models.CharField(blank=True, help_text='The URL path of the requested resource.', max_length=255, null=True, verbose_name='Path'),
        ),
        migrations.AlterField(
            model_name='requestlog',
            name='timestamp',
            field=models.DateTimeField(auto_now_add=True, help_text='The timestamp when the request was received.', null=True, verbose_name='Timestamp'),
        ),
        migrations.AlterField(
            model_name='requestlog',
            name='user_agent',
            field=models.CharField(blank=True, help_text="The user agent string sent by the client's browser.", max_length=255, null=True, verbose_name='User Agent'),
        ),
        migrations.AlterField(
            model_name='server',
            name='available',
            field=models.BooleanField(default=False, help_text='Indicates whether the server is available.', verbose_name='If Available'),
        ),
        migrations.AlterField(
            model_name='server',
            name='ip_address',
            field=models.GenericIPAddressField(help_text='The IP address of the server.', unique=True, verbose_name='IP Adress'),
        ),
        migrations.AlterField(
            model_name='server',
            name='location',
            field=models.CharField(help_text='The location of the server.', max_length=100, verbose_name='Server Location'),
        ),
        migrations.AlterField(
            model_name='server',
            name='name',
            field=models.CharField(help_text='The name of the server.', max_length=100, verbose_name='Server Name'),
        ),
        migrations.AlterField(
            model_name='server',
            name='port',
            field=models.IntegerField(help_text='The port number of the server.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='Port'),
        ),
        migrations.AlterField(
            model_name='server',
            name='trusty',
            field=models.BooleanField(default=False, help_text='Indicates whether the server is trusted.', verbose_name='If Trust'),
        ),
        migrations.AlterField(
            model_name='server',
            name='user',
            field=models.ForeignKey(blank=True, help_text='The user associated with the server (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AlterField(
            model_name='session',
            name='created',
            field=models.DateTimeField(auto_now_add=True, help_text='The timestamp when this session was created\\.', verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='session',
            name='expires',
            field=models.DateTimeField(default=datetime.datetime(2025, 1, 15, 14, 40, 47, 518205, tzinfo=datetime.timezone.utc), editable=False, help_text='The timestamp when this session will expire\\.', verbose_name='Session expiry'),
        ),
        migrations.AlterField(
            model_name='session',
            name='server',
            field=models.OneToOneField(help_text='The server where this session is active\\.', on_delete=django.db.models.deletion.CASCADE, to='session.server', verbose_name='Server'),
        ),
        migrations.AlterField(
            model_name='session',
            name='sessionId',
            field=models.CharField(db_index=True, editable=False, help_text='The unique identifier for this session\\.', max_length=32, unique=True, verbose_name='Session Id'),
        ),
        migrations.AlterField(
            model_name='session',
            name='user',
            field=models.OneToOneField(help_text='The user associated with this session.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.CreateModel(
            name='TemporaryToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(editable=False, help_text='The unique token for calculate HMAC.', max_length=128, unique=True, verbose_name='Token')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The timestamp when this token was created\\.', verbose_name='Created')),
                ('expires_at', models.DateTimeField(default=datetime.datetime(2025, 1, 15, 12, 42, 47, 518972, tzinfo=datetime.timezone.utc), editable=False, help_text='The timestamp when this token will expire\\.', verbose_name='Temporary Token expiry')),
                ('session', models.ForeignKey(editable=False, help_text='Session to which the temorary token is assigned.', on_delete=django.db.models.deletion.CASCADE, to='session.session', verbose_name='Session')),
            ],
            options={
                'verbose_name': 'Temporary Token',
                'verbose_name_plural': 'Temporary Token',
                'ordering': ['-expires_at'],
            },
        ),
    ]
